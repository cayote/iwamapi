---
alwaysApply: true
---
# Conventional Commits Guide
All commit messages must adhere to the Conventional Commits specification. The basic structure of a commit message is as follows:

```
<type>[optional scope]: <description>

[optional body]

[optional footer(s)]
```

## Type

Must be one of the following:

*   `feat`: A new feature
*   `fix`: A bug fix
*   `docs`: Documentation only changes
*   `style`: Changes that do not affect the meaning of the code (white-space, formatting, missing semicolons, etc.)
*   `refactor`: A code change that neither fixes a bug nor adds a feature
*   `perf`: A code change that improves performance
*   `test`: Adding missing tests or correcting existing tests
*   `build`: Changes that affect the build system or external dependencies (example scopes: gulp, broccoli, npm)
*   `ci`: Changes to our CI configuration files and scripts (example scopes: Travis, Circle, BrowserStack, SauceLabs)
*   `chore`: Other changes that don't modify src or test files
*   `revert`: Reverts a previous commit

## Scope (optional)

A scope can be provided to a commit's type, to provide additional contextual information. It should be a noun describing a section of the codebase enclosed in parentheses, e.g., `feat(parser): add ability to parse arrays`.

## Description

A short, imperative tense description of the change. E.g., `fix: prevent racing of requests`.

## Body (optional)

A longer description of the commit change.

## Footer(s) (optional)

References issues, e.g., `Closes #123`, `Refs #456`. Breaking changes should be noted here, e.g., `BREAKING CHANGE: <description>`.